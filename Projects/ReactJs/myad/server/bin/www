#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const typeDefs = require('./../schema');
var http = require('http');
const {ApolloServer} = require('apollo-server-express');
const { ApolloServerPluginDrainHttpServer } = require('apollo-server-core');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Define Apollo Server
 */
 async function startApolloServer(typeDefs, resolvers){
  /**
   * Create HTTP server.
   */
  
  const httpServer = http.createServer(app);
  /**
   * Listen on provided port, on all network interfaces.
   */
  
  // httpServer.listen(port);
  httpServer.on('error', onError);

  const apolloServer = new ApolloServer({
    typeDefs,
    mocks:{
      getAdvertiser: (id)=>({
        id:'1',
        name:'senthur athiban',
        email:'senthurathiban@gmail.com',
        password:'adfasfsafs',
        mobile:'9765432112',
        avgRating:4,
        isBlocked:false,
      }),
      advertiser: ()=>({
        id: ()=>'1',
        name: ()=>'senthur athiban',
        email: ()=>'senthurathiban@gmail.com',
        password: ()=>'adfasfsafs',
        mobile: ()=>'9765432112',
        avgRating: ()=>4,
        isBlocked: ()=>false,
      })
    },
    plugins: [ApolloServerPluginDrainHttpServer({httpServer})]
  })

  await apolloServer.start();
  apolloServer.applyMiddleware({
    app,
    path: '/'
  });
  await new Promise(resolve=>httpServer.listen({port:4000},resolve));
  console.log(`ðŸš€ Server ready at http://localhost:4000${apolloServer.graphqlPath}`);
}

startApolloServer(typeDefs,{});